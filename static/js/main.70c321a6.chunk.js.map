{"version":3,"sources":["components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Login","class","src","alt","onSuccess","credentialResponse","decoded","jwtDecode","credential","includes","hd","window","location","href","queryString","URLSearchParams","toString","replace","onError","err","console","log","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","clientId","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAiDeA,MA5Cf,WAqBE,OACE,yBAAKC,MAAM,aACT,yBAAKA,MAAM,eACT,yBAAKC,IAAI,8BAA8BC,IAAI,SAC3C,uCAAgB,6BAChB,kBAAC,IAAD,CACEC,UAAW,SAAAC,GACT,IAAMC,EAAUC,YAAUF,EAAmBG,YAC7C,IAAK,CAAC,YAAa,aAAaC,SAASH,EAAQI,IAC/C,OAAOC,OAAOC,SAASC,KAEzB,IAAMC,EAAc,IAAIC,gBAAgBV,GAAoBW,WAC5DL,OAAOC,SAASK,QAAhB,oEAAqFH,KAEvFI,QAAS,SAAAC,GACPC,QAAQC,IAAI,eAAgBF,SC7BzBG,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAqBC,SAAS,4EAC5B,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.70c321a6.chunk.js","sourcesContent":["import React from 'react';\n\nimport { GoogleLogin } from '@react-oauth/google';\nimport { jwtDecode } from 'jwt-decode';\n\nfunction Login() {\n  // return (\n  //   <div className='container'>\n\n  //     <GoogleLogin\n  //       onSuccess={credentialResponse => {\n  //         const decoded = jwtDecode(credentialResponse.credential);\n  //         if (!['gslab.com', 'gmail.com'].includes(decoded.hd)) {\n  //           return window.location.href;\n  //         }\n  //         const queryString = new URLSearchParams(credentialResponse).toString();\n  //         window.location.replace(`http://172.25.12.211:8080/ruleeditor-0.0.1-SNAPSHOT/login?${queryString}`);\n  //       }}\n  //       onError={err => {\n  //         console.log('Login Failed', err);\n  //       }}\n  //     />;\n\n  //   </div>\n  // );\n\n  return (\n    <div class=\"container\">\n      <div class=\"top-content\">\n        <img src=\"../images/flipkart-logo.png\" alt=\"Logo\" />\n        <h2>Sign in</h2><br />\n        <GoogleLogin\n          onSuccess={credentialResponse => {\n            const decoded = jwtDecode(credentialResponse.credential);\n            if (!['gslab.com', 'gmail.com'].includes(decoded.hd)) {\n              return window.location.href;\n            }\n            const queryString = new URLSearchParams(credentialResponse).toString();\n            window.location.replace(`http://172.25.12.211:8080/ruleeditor-0.0.1-SNAPSHOT/login?${queryString}`);\n          }}\n          onError={err => {\n            console.log('Login Failed', err);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { GoogleOAuthProvider } from '@react-oauth/google';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GoogleOAuthProvider clientId=\"648085406021-vej5d1alfbq2l6eam25crr1tg6eh5h9r.apps.googleusercontent.com\">\n      <App />\n    </GoogleOAuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}